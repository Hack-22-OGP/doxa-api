app: doxa-api
service: doxa-api
frameworkVersion: '2 || 3'

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-apigateway-service-proxy
custom:
  apiGatewayServiceProxies:
    - s3:
        path: /poll/{myKey} # use path param
        method: get
        action: GetObject
        bucket:
          Ref: ProxySite
        key:
          pathParam: index.html
        cors: true
  serverless-offline:
    httpPort: 3000
  dynamodb:
    start:
      port: 5000
      inMemory: false
      migrate: true
    stages:
      - dev

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  lambdaHashingVersion: '20201221'
  region: ap-southeast-1
  environment:
    DOXA_POLL_TABLE: ${self:service}-poll-${opt:stage, self:provider.stage}
    DOXA_VOTE_USER_TABLE: ${self:service}-vote-user-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOXA_POLL_TABLE}'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOXA_VOTE_USER_TABLE}'

functions:
  getIndex:
    handler: src/context-handlers/main.handlerIndex
    events:
      - http:
          path: /
          method: get
          cors: true
  getDoxa:
    handler: src/context-handlers/main.handlerDoxa
    events:
      - http:
          path: /{id}
          method: get
          cors: true
  authenticateUser:
    handler: src/context-handlers/auth.handlerAuthenticateUser
    events:
      - http:
          path: /api/auth
          method: get
          cors: true
  lambdaAuthorizer:
    handler: src/context-handlers/auth.handlerLambdaAuthorizer
  createPoll:
    handler: src/context-handlers/poll.handlerCreatePoll
    events:
      - http:
          path: /api/poll
          method: post
          cors: true
  getPollList:
    handler: src/context-handlers/poll.handlerGetPollList
    events:
      - http:
          path: /api/poll
          method: get
          cors: true
  getPollDetail:
    handler: src/context-handlers/poll.handlerGetPollDetail
    events:
      - http:
          path: /api/poll/{id}
          method: get
          cors: true
  createPollVote:
    handler: src/context-handlers/vote.handlerCreateVote
    events:
      - http:
          path: /api/poll/{id}/vote
          method: post
          cors: true
          authorizer:
            name: lambdaAuthorizer
            type: token
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  getPollCheckVote:
    handler: src/context-handlers/vote.handlerGetPollCheckVote
    events:
      - http:
          path: /api/poll/{id}/check-vote
          method: get
          cors: true
          authorizer:
            name: lambdaAuthorizer
            type: token
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  getSgIdCallback:
    handler: src/context-handlers/sgid.handlerCallback
    events:
      - http:
          path: /sgid/callback
          method: get
          cors: true

resources:
  Resources:
    ProxySite:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
        BucketName: doxa-fe
        WebsiteConfiguration:
          IndexDocument: index.html
    DoxaPollDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DOXA_POLL_TABLE}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DoxaVoteUserDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DOXA_VOTE_USER_TABLE}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
